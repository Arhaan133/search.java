import java.util.*;

public class TwoSum {
    public static int[] twoSum(int[] nums, int target) {
        map<Integer , Integer> map = new Hashmap<>();

        for(int i =0 ; i < nums.length ; i++) {
            int complement = target - nums[i];

        if(map.containsKey(complement)) {
            return new int {map.get(complement), i };
        }
        map.put(nums[i],i);
        }
        return new int[] {};
    }


public static void main(String[] args) {
    int [] nums = {2,7,11,15};
    int [] target = 9;
    int [] result = twoSum(nums , target);
    System.out.println(Arrays.toString(result));
}
}



// import java.util.*;

// public class TwoSum {
//     public static int[] twoSum(int[] nums,int target) {
//         map<Integer , Integer> map = new Hashmap<>();
//         for (int i = 0; i <nums.length; i++) {
//             int complement = target - nums[i];


//             if(map.containsKey(complement)) {
//                 return new int{map.get(complement),i};
//             }
//             map.put(nums[i],i);
//         }
//         return new int[] {};
//     } 
// public static void main(String [] args) {
//     int [] nums = {1,3,3,4};
//     int [] target = 4;
//     int [] result = twoSum(nums,target);
//     System.out.println(Arrays.toString(result));
// }
// }



// /*onepass 
// hasing */

// import java.util.*;

// public class TwoSum {
//     public static int[] twoSum(int[] nums, int target ) {
//         map<Integer , Integer> map = new Hashmap<>();
        
//         for(int i  = 0 ; i < nums.length ; i++) {
//             int complement = target - nums[i];


//         if(map.Containskey(complement)) {
//             return new int{map.get(complement),i};

//         }   
//         map.put(nums[i],i);
//         }
//         return new int[] {};
//     }
// public static void main(String []args) {
//     int [] nums = {1,5,6,6};
//     int [] target = 7;
//     int [] result = twoSum(nums,target);
//     System.out.println(Araays.toString(result));
// }
// }


// | Operation | Complexity                                     |
// | --------- | ---------------------------------------------- |
// | Time      | `O(n)` (one pass through the array)            |
// | Space     | `O(n)` (storing up to `n` elements in HashMap) |
